/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef scheduler_TYPES_H
#define scheduler_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




class Node;

class Edge;

class NodeMap;

class EdgeMap;

class Request;

class Result;

typedef struct _Node__isset {
  _Node__isset() : id(false), resource_need(false) {}
  bool id :1;
  bool resource_need :1;
} _Node__isset;

class Node : public virtual ::apache::thrift::TBase {
 public:

  Node(const Node&);
  Node& operator=(const Node&);
  Node() : id(0) {
  }

  virtual ~Node() throw();
  int32_t id;
  std::map<std::string, int32_t>  resource_need;

  _Node__isset __isset;

  void __set_id(const int32_t val);

  void __set_resource_need(const std::map<std::string, int32_t> & val);

  bool operator == (const Node & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(resource_need == rhs.resource_need))
      return false;
    return true;
  }
  bool operator != (const Node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Node &a, Node &b);

std::ostream& operator<<(std::ostream& out, const Node& obj);

typedef struct _Edge__isset {
  _Edge__isset() : from_id(false), to_id(false), bandwidth_needed(false) {}
  bool from_id :1;
  bool to_id :1;
  bool bandwidth_needed :1;
} _Edge__isset;

class Edge : public virtual ::apache::thrift::TBase {
 public:

  Edge(const Edge&);
  Edge& operator=(const Edge&);
  Edge() : from_id(0), to_id(0), bandwidth_needed(0) {
  }

  virtual ~Edge() throw();
  int32_t from_id;
  int32_t to_id;
  int32_t bandwidth_needed;

  _Edge__isset __isset;

  void __set_from_id(const int32_t val);

  void __set_to_id(const int32_t val);

  void __set_bandwidth_needed(const int32_t val);

  bool operator == (const Edge & rhs) const
  {
    if (!(from_id == rhs.from_id))
      return false;
    if (!(to_id == rhs.to_id))
      return false;
    if (!(bandwidth_needed == rhs.bandwidth_needed))
      return false;
    return true;
  }
  bool operator != (const Edge &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Edge & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Edge &a, Edge &b);

std::ostream& operator<<(std::ostream& out, const Edge& obj);

typedef struct _NodeMap__isset {
  _NodeMap__isset() : v_id(false), p_id(false) {}
  bool v_id :1;
  bool p_id :1;
} _NodeMap__isset;

class NodeMap : public virtual ::apache::thrift::TBase {
 public:

  NodeMap(const NodeMap&);
  NodeMap& operator=(const NodeMap&);
  NodeMap() : v_id(0), p_id(0) {
  }

  virtual ~NodeMap() throw();
  int32_t v_id;
  int32_t p_id;

  _NodeMap__isset __isset;

  void __set_v_id(const int32_t val);

  void __set_p_id(const int32_t val);

  bool operator == (const NodeMap & rhs) const
  {
    if (!(v_id == rhs.v_id))
      return false;
    if (!(p_id == rhs.p_id))
      return false;
    return true;
  }
  bool operator != (const NodeMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NodeMap &a, NodeMap &b);

std::ostream& operator<<(std::ostream& out, const NodeMap& obj);

typedef struct _EdgeMap__isset {
  _EdgeMap__isset() : v_id_1(false), v_id_2(false), p_id_sequence(false) {}
  bool v_id_1 :1;
  bool v_id_2 :1;
  bool p_id_sequence :1;
} _EdgeMap__isset;

class EdgeMap : public virtual ::apache::thrift::TBase {
 public:

  EdgeMap(const EdgeMap&);
  EdgeMap& operator=(const EdgeMap&);
  EdgeMap() : v_id_1(0), v_id_2(0) {
  }

  virtual ~EdgeMap() throw();
  int32_t v_id_1;
  int32_t v_id_2;
  std::vector<int32_t>  p_id_sequence;

  _EdgeMap__isset __isset;

  void __set_v_id_1(const int32_t val);

  void __set_v_id_2(const int32_t val);

  void __set_p_id_sequence(const std::vector<int32_t> & val);

  bool operator == (const EdgeMap & rhs) const
  {
    if (!(v_id_1 == rhs.v_id_1))
      return false;
    if (!(v_id_2 == rhs.v_id_2))
      return false;
    if (!(p_id_sequence == rhs.p_id_sequence))
      return false;
    return true;
  }
  bool operator != (const EdgeMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EdgeMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EdgeMap &a, EdgeMap &b);

std::ostream& operator<<(std::ostream& out, const EdgeMap& obj);

typedef struct _Request__isset {
  _Request__isset() : request_id(false), v_node_num(false), v_edge_num(false), node_resource_dim_num(false), node(false), edge(false), v_map_p(false) {}
  bool request_id :1;
  bool v_node_num :1;
  bool v_edge_num :1;
  bool node_resource_dim_num :1;
  bool node :1;
  bool edge :1;
  bool v_map_p :1;
} _Request__isset;

class Request : public virtual ::apache::thrift::TBase {
 public:

  Request(const Request&);
  Request& operator=(const Request&);
  Request() : request_id(0), v_node_num(0), v_edge_num(0), node_resource_dim_num(0) {
  }

  virtual ~Request() throw();
  int32_t request_id;
  int32_t v_node_num;
  int32_t v_edge_num;
  int32_t node_resource_dim_num;
  std::vector<Node>  node;
  std::vector<Edge>  edge;
  std::vector<NodeMap>  v_map_p;

  _Request__isset __isset;

  void __set_request_id(const int32_t val);

  void __set_v_node_num(const int32_t val);

  void __set_v_edge_num(const int32_t val);

  void __set_node_resource_dim_num(const int32_t val);

  void __set_node(const std::vector<Node> & val);

  void __set_edge(const std::vector<Edge> & val);

  void __set_v_map_p(const std::vector<NodeMap> & val);

  bool operator == (const Request & rhs) const
  {
    if (!(request_id == rhs.request_id))
      return false;
    if (!(v_node_num == rhs.v_node_num))
      return false;
    if (!(v_edge_num == rhs.v_edge_num))
      return false;
    if (!(node_resource_dim_num == rhs.node_resource_dim_num))
      return false;
    if (!(node == rhs.node))
      return false;
    if (!(edge == rhs.edge))
      return false;
    if (!(v_map_p == rhs.v_map_p))
      return false;
    return true;
  }
  bool operator != (const Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Request &a, Request &b);

std::ostream& operator<<(std::ostream& out, const Request& obj);

typedef struct _Result__isset {
  _Result__isset() : request_id(false), result_flag(false), v_node_num(false), v_edge_num(false), node_map(false), edge_map(false) {}
  bool request_id :1;
  bool result_flag :1;
  bool v_node_num :1;
  bool v_edge_num :1;
  bool node_map :1;
  bool edge_map :1;
} _Result__isset;

class Result : public virtual ::apache::thrift::TBase {
 public:

  Result(const Result&);
  Result& operator=(const Result&);
  Result() : request_id(0), result_flag(0), v_node_num(0), v_edge_num(0) {
  }

  virtual ~Result() throw();
  int32_t request_id;
  bool result_flag;
  int32_t v_node_num;
  int32_t v_edge_num;
  std::vector<NodeMap>  node_map;
  std::vector<EdgeMap>  edge_map;

  _Result__isset __isset;

  void __set_request_id(const int32_t val);

  void __set_result_flag(const bool val);

  void __set_v_node_num(const int32_t val);

  void __set_v_edge_num(const int32_t val);

  void __set_node_map(const std::vector<NodeMap> & val);

  void __set_edge_map(const std::vector<EdgeMap> & val);

  bool operator == (const Result & rhs) const
  {
    if (!(request_id == rhs.request_id))
      return false;
    if (!(result_flag == rhs.result_flag))
      return false;
    if (!(v_node_num == rhs.v_node_num))
      return false;
    if (!(v_edge_num == rhs.v_edge_num))
      return false;
    if (!(node_map == rhs.node_map))
      return false;
    if (!(edge_map == rhs.edge_map))
      return false;
    return true;
  }
  bool operator != (const Result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Result &a, Result &b);

std::ostream& operator<<(std::ostream& out, const Result& obj);



#endif
