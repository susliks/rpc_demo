// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Serv.h"
//#include <config.h> 
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/protocol/TCompactProtocol.h> 
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::apache::thrift::concurrency;

class ServHandler : virtual public ServIf {
 public:
  ServHandler() {
    // Your initialization goes here
  }

  void put(const Student& s) {
    // Your implementation goes here
    printf("put\n");
    printf("sno=%d sname=%s ssex=%d sage=%d\n", s.sno, s.sname.c_str(), s.ssex, s.sage);
    int nodes_size = s.nodes.size();
    printf("%d\n", nodes_size);
    for (int i = 0; i < nodes_size; ++i) {
        printf("id=%d resource:", s.nodes[i].id);
        int resource_size = s.nodes[i].resource.size();
        for (int j = 0; j < resource_size; ++j) {
            printf("%d ", s.nodes[i].resource[j]);
        }
        printf("\n");
    }

    int big_num = 1000000000;
    for (int i = 0; i < big_num; i++) {
        if (i % (100000) == 0) {
            printf("%d", i / (big_num/10));
        }
    }
  }

};

int main(int argc, char **argv) {
    int port = 9090;
    //::apache::thrift::stdcxx::shared_ptr<ServHandler> handler(new ServHandler());

    /*
    ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new ServProcessor(handler));
    ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    */

    /*
    std::shared_ptr<TProcessor> processor(new serDemoProcessor(handler));
    std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    std::shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(CMyIni::instance()->m_maxPool);//指定10个线程数
    std::shared_ptr<PosixThreadFactory> threadFactory = shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
    threadManager->threadFactory(threadFactory);
    threadManager->start();
    TThreadPoolServer server(processor,serverTransport,transportFactory,protocolFactory,threadManager);
    */

    std::shared_ptr<ServHandler> handler(new ServHandler());
    std::shared_ptr<TProcessor> processor(new ServProcessor(handler));
    std::shared_ptr<TProtocolFactory> protocolFactory(new TCompactProtocolFactory());
    std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));

    std::shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(1);
    std::shared_ptr<PosixThreadFactory> threadFactory = std::shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
    threadManager->threadFactory(threadFactory);
    threadManager->start();
    printf("start user server...\n");

    TThreadPoolServer server(processor, serverTransport, transportFactory, protocolFactory, threadManager);  


    server.serve();
    return 0;
}

