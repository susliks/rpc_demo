/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "student_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




Node::~Node() throw() {
}


void Node::__set_id(const int32_t val) {
  this->id = val;
}

void Node::__set_resource(const std::vector<int32_t> & val) {
  this->resource = val;
}
std::ostream& operator<<(std::ostream& out, const Node& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Node::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resource.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->resource.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->resource[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Node::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Node");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resource", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->resource.size()));
    std::vector<int32_t> ::const_iterator _iter5;
    for (_iter5 = this->resource.begin(); _iter5 != this->resource.end(); ++_iter5)
    {
      xfer += oprot->writeI32((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Node &a, Node &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.resource, b.resource);
  swap(a.__isset, b.__isset);
}

Node::Node(const Node& other6) {
  id = other6.id;
  resource = other6.resource;
  __isset = other6.__isset;
}
Node& Node::operator=(const Node& other7) {
  id = other7.id;
  resource = other7.resource;
  __isset = other7.__isset;
  return *this;
}
void Node::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Node(";
  out << "id=" << to_string(id);
  out << ", " << "resource=" << to_string(resource);
  out << ")";
}


Student::~Student() throw() {
}


void Student::__set_sno(const int32_t val) {
  this->sno = val;
}

void Student::__set_sname(const std::string& val) {
  this->sname = val;
}

void Student::__set_ssex(const bool val) {
  this->ssex = val;
}

void Student::__set_sage(const int16_t val) {
  this->sage = val;
}

void Student::__set_nodes(const std::vector<Node> & val) {
  this->nodes = val;
}
std::ostream& operator<<(std::ostream& out, const Student& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Student::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sno);
          this->__isset.sno = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sname);
          this->__isset.sname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ssex);
          this->__isset.ssex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->sage);
          this->__isset.sage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->nodes.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += this->nodes[_i12].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Student::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Student");

  xfer += oprot->writeFieldBegin("sno", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sno);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sname", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ssex", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->ssex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sage", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->sage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->nodes.size()));
    std::vector<Node> ::const_iterator _iter13;
    for (_iter13 = this->nodes.begin(); _iter13 != this->nodes.end(); ++_iter13)
    {
      xfer += (*_iter13).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Student &a, Student &b) {
  using ::std::swap;
  swap(a.sno, b.sno);
  swap(a.sname, b.sname);
  swap(a.ssex, b.ssex);
  swap(a.sage, b.sage);
  swap(a.nodes, b.nodes);
  swap(a.__isset, b.__isset);
}

Student::Student(const Student& other14) {
  sno = other14.sno;
  sname = other14.sname;
  ssex = other14.ssex;
  sage = other14.sage;
  nodes = other14.nodes;
  __isset = other14.__isset;
}
Student& Student::operator=(const Student& other15) {
  sno = other15.sno;
  sname = other15.sname;
  ssex = other15.ssex;
  sage = other15.sage;
  nodes = other15.nodes;
  __isset = other15.__isset;
  return *this;
}
void Student::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Student(";
  out << "sno=" << to_string(sno);
  out << ", " << "sname=" << to_string(sname);
  out << ", " << "ssex=" << to_string(ssex);
  out << ", " << "sage=" << to_string(sage);
  out << ", " << "nodes=" << to_string(nodes);
  out << ")";
}


